name: Docker Image CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


env:

  NAMESPACE: namespace
  TAG: 0.0.${{ github.run_number }}
  REPO: https://anthhub.github.io/test-deploy
  REQ: $(curl -s https://anthhub.github.io/test-deploy/latest?q=$RANDOM)

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Dockerfile
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v1
        with: 
          registry: ${{ secrets.ALI_DOCKER_HUB_REGISTRY }}
          username: ${{ secrets.ALI_DOCKER_HUB_USN }}
          password: ${{ secrets.ALI_DOCKER_HUB_PWD }}
          repository: anthhub/go-demo
          tags: ${{ env.TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.0

      - name: Run Helm Package
        run: cd ./helm && helm package ./config --version=${{ env.TAG }} && helm repo index . && ls > index.html && echo ${{ env.TAG }} > latest

      - name: Deploy Helm
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./helm

      - name: Helm Setup
        timeout-minutes: 10
        uses: JimCronqvist/action-ssh@master
        with:
          hosts: "118.190.37.169"
          privateKey: ${{ secrets.PRIVATE_KEY }}
          command: |
            helm repo add test-deploy ${{ env.REPO }}

            until [ ${{ env.REQ }} = ${{ env.TAG }} ]
            do
              sleep 1
              echo "sleeping"
              echo ${{ env.REQ }} -- ${{ env.TAG }}
            done
            echo "pass"

            helm repo update
            helm search repo test-deploy
            if helm status test-deploy 
            then
              helm upgrade test-deploy test-deploy/go-server-chart --version=${{ env.TAG }} --set image.tag=${{ env.TAG }}
            else
              helm install test-deploy test-deploy/go-server-chart --version=${{ env.TAG }} --set image.tag=${{ env.TAG }}
            fi

            helm ls

